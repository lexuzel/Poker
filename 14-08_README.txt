**Контент папки PROJECT

Папка PROJECT містить 3 програми. Послідовно їх запускаючи, 

можна відтворити "весь" хід детектування карти. Послідовність така:

 - Prepare Image

 - SearchCart

 - CartMatching

Наступна прога використовує аутпут минулої.



**Налаштування проекту

1. У мене стоїть Visual Studio 2015 (Platform Toolset v.140). 

2. В процесі розробки не використовував Image Watch, 

   тому режиму Release-with-debug немає.

3. В Properties рішень налаштовані !абсолютні! адреси бібліотек так, 

   як вони лежать у мене на компі.



**Вибірка

Програми протестовані тільки на імеджах розміру 640х480.

З картинками HD не матчаться.



**Поточна постановка задачі

Детектувати декілька (1-5+) карт, що лежать на "помірно освітленій" підложці і не пересікаються між собою.

Від складніших випадків поки абстрагуємось.



**Можливі вектори розвитку 

Це не директиви, а лише пропозиції. Сподіваюсь на розуміння і (або) плідну дискусію.



1. Препроцессінг картинки зробити автоматичним і якомога більш універсальним.

   Можливе рішення:

   equalizeHist() 

   -> brightness-- 

   -> contrast++ 

   -> bilateralBlur(big Kernel);

2. Виділення маски і контурів карт.

   Можливе рішення:

   findContours() з аутпута препроцессінгу.

   -> Знаходимо з перелічених контур "прямокутної" області 

   -> Шукаємо серед інших контури, що мають схожу величину і коефіцієнт "прямокутності"*, що і перший знайдений

   (Оскільки матриця перетворення буде майже та сама, то і коеф. "прямокутності" повинен збігатись,

    *Сам коефіцієнт я поки не придумав. Може бути відношення різних величин типу площі і периметра області.)

   -> Заносимо знайдені контури до вектора і працюємо далі тільки з ними (по суті чиста маска вже і не треба)

   -> Апроксимуємо контур до 4 точок. Отримуємо матрицю перетворення для одного контура. Застосовуємо для кожного.

3. Matching

   Можна матчити лише шматок карти, тобто Rect(0, 0, width / 3, height / 4);



   Поки що достатньо перевірити роботу проги, що вже є (CartMatching), на великих картинках. 